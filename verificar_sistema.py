# verificar_sistema.py - Verificaci√≥n Final del Sistema
"""
Script para verificar que todo el sistema est√° funcionando correctamente
"""
import os
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_taller.settings')
django.setup()

from django.contrib.auth.models import User
from taller.models import Empresa, LogAuditoria, Documento, PerfilUsuario
from django.db import connection

def print_banner():
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    E-GARAGE VERIFICACI√ìN FINAL              ‚ïë
‚ïë                     Sistema de Verificaci√≥n                 ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
""")

def verificar_base_datos():
    """Verificar conexi√≥n y estado de la base de datos"""
    print("üîç VERIFICANDO BASE DE DATOS...")
    
    try:
        # Verificar conexi√≥n
        with connection.cursor() as cursor:
            cursor.execute("SELECT 1")
        print("‚úÖ Conexi√≥n a base de datos: OK")
        
        # Verificar tablas principales
        tablas_esperadas = [
            'taller_empresa',
            'taller_perfilusuario', 
            'taller_cliente',
            'taller_vehiculo',
            'taller_documento',
            'taller_repuesto',
            'taller_logauditoria'
        ]
        
        with connection.cursor() as cursor:
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tablas_existentes = [row[0] for row in cursor.fetchall()]
        
        tablas_faltantes = []
        for tabla in tablas_esperadas:
            if tabla in tablas_existentes:
                print(f"‚úÖ Tabla {tabla}: OK")
            else:
                tablas_faltantes.append(tabla)
                print(f"‚ùå Tabla {tabla}: FALTANTE")
        
        if tablas_faltantes:
            print(f"‚ö†Ô∏è  ADVERTENCIA: {len(tablas_faltantes)} tablas faltantes")
            return False
        else:
            print("‚úÖ Todas las tablas principales: OK")
            return True
            
    except Exception as e:
        print(f"‚ùå Error en base de datos: {e}")
        return False

def verificar_modelos():
    """Verificar que los modelos funcionan correctamente"""
    print("\nüîç VERIFICANDO MODELOS...")
    
    checks = {
        'Empresas': False,
        'Usuarios con Perfil': False,
        'Auditor√≠a': False,
        'Documentos': False
    }
    
    try:
        # Verificar empresas
        empresas = Empresa.objects.all()
        print(f"‚úÖ Empresas registradas: {empresas.count()}")
        checks['Empresas'] = empresas.count() > 0
        
        # Verificar usuarios con perfil
        perfiles = PerfilUsuario.objects.all()
        print(f"‚úÖ Usuarios con perfil: {perfiles.count()}")
        checks['Usuarios con Perfil'] = perfiles.count() > 0
        
        # Verificar sistema de auditor√≠a
        logs = LogAuditoria.objects.all()
        print(f"‚úÖ Logs de auditor√≠a: {logs.count()}")
        checks['Auditor√≠a'] = True  # El sistema existe
        
        # Verificar documentos
        documentos = Documento.objects.all()
        print(f"‚úÖ Documentos creados: {documentos.count()}")
        checks['Documentos'] = True  # El sistema existe
        
        # Mostrar empresas espec√≠ficas
        if empresas.exists():
            print("\nüìã EMPRESAS REGISTRADAS:")
            for i, empresa in enumerate(empresas, 1):
                print(f"   {i}. {empresa.nombre_taller}")
                
                # Verificar usuarios de la empresa
                perfiles_empresa = PerfilUsuario.objects.filter(empresa=empresa)
                if perfiles_empresa.exists():
                    print(f"      üë§ Usuarios: {perfiles_empresa.count()}")
                    for perfil in perfiles_empresa:
                        print(f"         - {perfil.usuario.username}")
                
                # Verificar documentos de la empresa
                docs_empresa = Documento.objects.filter(empresa=empresa)
                print(f"      üìÑ Documentos: {docs_empresa.count()}")
        
        passed_checks = sum(checks.values())
        total_checks = len(checks)
        
        print(f"\n‚úÖ Verificaciones pasadas: {passed_checks}/{total_checks}")
        return passed_checks == total_checks
        
    except Exception as e:
        print(f"‚ùå Error verificando modelos: {e}")
        return False

def verificar_funcionalidad_documentos():
    """Verificar que la funcionalidad de documentos est√° funcionando"""
    print("\nüîç VERIFICANDO FUNCIONALIDAD DE DOCUMENTOS...")
    
    try:
        # Verificar documento m√°s reciente
        documento_reciente = Documento.objects.order_by('-id').first()
        
        if documento_reciente:
            print(f"‚úÖ Documento m√°s reciente: #{documento_reciente.id}")
            print(f"   üìÖ Fecha: {documento_reciente.created_at}")
            print(f"   üè¢ Empresa: {documento_reciente.empresa.nombre_taller}")
            
            # Verificar repuestos y servicios
            from taller.models import RepuestoDocumento, ServicioDocumento
            
            repuestos = RepuestoDocumento.objects.filter(documento=documento_reciente)
            servicios = ServicioDocumento.objects.filter(documento=documento_reciente)
            
            print(f"   üîß Repuestos: {repuestos.count()}")
            print(f"   ‚öôÔ∏è  Servicios: {servicios.count()}")
            
            # Verificar datos JSON
            if hasattr(documento_reciente, 'repuestos_json') and documento_reciente.repuestos_json:
                import json
                try:
                    repuestos_data = json.loads(documento_reciente.repuestos_json)
                    print(f"   üìä Repuestos JSON: {len(repuestos_data)} elementos")
                except:
                    print("   ‚ö†Ô∏è  Error en repuestos JSON")
            
            if hasattr(documento_reciente, 'servicios_json') and documento_reciente.servicios_json:
                import json
                try:
                    servicios_data = json.loads(documento_reciente.servicios_json)
                    print(f"   üìä Servicios JSON: {len(servicios_data)} elementos")
                except:
                    print("   ‚ö†Ô∏è  Error en servicios JSON")
            
            return True
        else:
            print("‚ö†Ô∏è  No hay documentos en el sistema")
            return True  # No es error cr√≠tico
            
    except Exception as e:
        print(f"‚ùå Error verificando documentos: {e}")
        return False

def verificar_sistema_backup():
    """Verificar que el sistema de backup est√° funcionando"""
    print("\nüîç VERIFICANDO SISTEMA DE BACKUP...")
    
    try:
        from pathlib import Path
        import datetime
        
        backup_dir = Path(__file__).parent / 'backups'
        
        if not backup_dir.exists():
            print("‚ùå Directorio de backups no existe")
            return False
        
        # Buscar backups recientes
        backups = list(backup_dir.glob('backup_*.json'))
        
        if not backups:
            print("‚ö†Ô∏è  No se encontraron archivos de backup")
            return False
        
        # Ordenar por fecha de modificaci√≥n
        backups.sort(key=lambda x: x.stat().st_mtime, reverse=True)
        
        print(f"‚úÖ Archivos de backup encontrados: {len(backups)}")
        
        # Verificar backup m√°s reciente
        backup_reciente = backups[0]
        import time
        antiguedad_horas = (time.time() - backup_reciente.stat().st_mtime) / 3600
        
        print(f"‚úÖ Backup m√°s reciente: {backup_reciente.name}")
        print(f"   üïê Antig√ºedad: {antiguedad_horas:.1f} horas")
        
        if antiguedad_horas <= 24:
            print("‚úÖ Backup reciente (menos de 24 horas)")
            return True
        else:
            print("‚ö†Ô∏è  Backup algo antiguo (m√°s de 24 horas)")
            return True  # No cr√≠tico para desarrollo
            
    except Exception as e:
        print(f"‚ùå Error verificando backups: {e}")
        return False

def verificar_sistema_auditoria():
    """Verificar que el sistema de auditor√≠a est√° funcionando"""
    print("\nüîç VERIFICANDO SISTEMA DE AUDITOR√çA...")
    
    try:
        # Verificar logs recientes
        from django.utils import timezone
        hace_24h = timezone.now() - timezone.timedelta(hours=24)
        
        logs_recientes = LogAuditoria.objects.filter(fecha_hora__gte=hace_24h)
        total_logs = LogAuditoria.objects.count()
        
        print(f"‚úÖ Total logs de auditor√≠a: {total_logs}")
        print(f"‚úÖ Logs √∫ltimas 24h: {logs_recientes.count()}")
        
        if logs_recientes.exists():
            # Mostrar tipos de acciones recientes
            acciones = logs_recientes.values('accion').distinct()
            print("   üìã Acciones registradas:")
            for accion in acciones:
                count = logs_recientes.filter(accion=accion['accion']).count()
                print(f"      - {accion['accion']}: {count}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error verificando auditor√≠a: {e}")
        return False

def generar_reporte_final():
    """Generar reporte final del sistema"""
    print("\nüìä GENERANDO REPORTE FINAL...")
    
    try:
        from django.contrib.auth.models import User
        
        # Estad√≠sticas generales
        stats = {
            'empresas': Empresa.objects.count(),
            'usuarios_total': User.objects.count(),
            'usuarios_con_perfil': PerfilUsuario.objects.count(),
            'documentos': Documento.objects.count(),
            'logs_auditoria': LogAuditoria.objects.count()
        }
        
        print("=" * 60)
        print("üìä ESTAD√çSTICAS DEL SISTEMA E-GARAGE")
        print("=" * 60)
        print(f"üè¢ Empresas registradas:      {stats['empresas']}")
        print(f"üë§ Usuarios totales:          {stats['usuarios_total']}")
        print(f"üë§ Usuarios con perfil:       {stats['usuarios_con_perfil']}")
        print(f"üìÑ Documentos creados:        {stats['documentos']}")
        print(f"üìã Logs de auditor√≠a:         {stats['logs_auditoria']}")
        print("=" * 60)
        
        # Verificar integridad general
        integridad = True
        
        if stats['empresas'] == 0:
            print("‚ö†Ô∏è  ADVERTENCIA: No hay empresas registradas")
            integridad = False
            
        if stats['usuarios_con_perfil'] == 0:
            print("‚ö†Ô∏è  ADVERTENCIA: No hay usuarios con perfil")
            integridad = False
        
        if integridad:
            print("‚úÖ SISTEMA INTEGRO Y FUNCIONANDO CORRECTAMENTE")
        else:
            print("‚ö†Ô∏è  SISTEMA FUNCIONANDO CON ADVERTENCIAS")
        
        return integridad
        
    except Exception as e:
        print(f"‚ùå Error generando reporte: {e}")
        return False

def main():
    """Funci√≥n principal de verificaci√≥n"""
    print_banner()
    
    verificaciones = {
        'Base de Datos': verificar_base_datos,
        'Modelos': verificar_modelos,
        'Funcionalidad Documentos': verificar_funcionalidad_documentos,
        'Sistema Backup': verificar_sistema_backup,
        'Sistema Auditor√≠a': verificar_sistema_auditoria
    }
    
    resultados = {}
    
    for nombre, funcion in verificaciones.items():
        try:
            resultado = funcion()
            resultados[nombre] = resultado
        except Exception as e:
            print(f"‚ùå Error en {nombre}: {e}")
            resultados[nombre] = False
    
    # Generar reporte final
    reporte_ok = generar_reporte_final()
    
    # Resumen final
    verificaciones_exitosas = sum(resultados.values())
    total_verificaciones = len(resultados)
    
    print(f"\n{'='*60}")
    print("üéØ RESUMEN DE VERIFICACIONES")
    print(f"{'='*60}")
    
    for nombre, resultado in resultados.items():
        status = "‚úÖ PASS" if resultado else "‚ùå FAIL"
        print(f"{status} {nombre}")
    
    print(f"\nüìä RESULTADO FINAL: {verificaciones_exitosas}/{total_verificaciones} verificaciones exitosas")
    
    if verificaciones_exitosas == total_verificaciones and reporte_ok:
        print("üéâ ¬°SISTEMA E-GARAGE COMPLETAMENTE VERIFICADO Y FUNCIONANDO!")
        return 0
    elif verificaciones_exitosas >= total_verificaciones * 0.8:  # 80% o m√°s
        print("‚ö†Ô∏è  Sistema funcionando con algunas advertencias")
        return 1
    else:
        print("‚ùå Sistema tiene problemas cr√≠ticos que requieren atenci√≥n")
        return 2

if __name__ == "__main__":
    exit_code = main()
    exit(exit_code)
