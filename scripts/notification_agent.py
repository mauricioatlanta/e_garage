"""
Agente de notificaci√≥n autom√°tica para vencimientos de trial y suscripciones
Configurado para ejecutarse como cronjob
"""

import os
import sys
import django
from datetime import datetime, timedelta
from django.core.mail import send_mail
from django.template.loader import render_to_string
from django.conf import settings
from django.utils import timezone

# Configuraci√≥n para usar Django desde script standalone
if __name__ == "__main__":
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_taller.settings')
    django.setup()

from taller.models import Empresa, TrialRegistro
from taller.utils.smart_logging import smart_logger


class NotificationAgent:
    """Agente inteligente de notificaciones"""
    
    def __init__(self):
        self.today = timezone.now().date()
        self.notifications_sent = 0
        self.errors = []
    
    def send_trial_expiration_warning(self, trial_registro, days_remaining):
        """Env√≠a notificaci√≥n de aviso de vencimiento de trial"""
        try:
            empresa = trial_registro.empresa
            user = trial_registro.user
            
            # Contexto para el template
            context = {
                'user_name': user.first_name or user.username,
                'empresa_name': empresa.nombre,
                'days_remaining': days_remaining,
                'login_url': f"{settings.SITE_URL}/accounts/login/",
                'upgrade_url': f"{settings.SITE_URL}/suscripciones/",
                'support_email': settings.DEFAULT_FROM_EMAIL,
                'today': self.today
            }
            
            # Renderizar email
            subject = f"‚ö†Ô∏è Tu trial de eGarage expira en {days_remaining} d√≠a{'s' if days_remaining != 1 else ''}"
            
            # Email en HTML
            html_message = render_to_string('emails/trial_expiration_warning.html', context)
            
            # Email en texto plano
            plain_message = f"""
Hola {context['user_name']},

Tu trial de eGarage para {context['empresa_name']} expira en {days_remaining} d√≠a{'s' if days_remaining != 1 else ''}.

Para continuar usando todas las funcionalidades:
1. Ingresa a tu cuenta: {context['login_url']}
2. Activa tu suscripci√≥n: {context['upgrade_url']}

¬øNecesitas ayuda? Cont√°ctanos: {context['support_email']}

Saludos,
Equipo eGarage
            """.strip()
            
            # Enviar email
            send_mail(
                subject=subject,
                message=plain_message,
                from_email=settings.DEFAULT_FROM_EMAIL,
                recipient_list=[user.email],
                html_message=html_message,
                fail_silently=False
            )
            
            # Log del env√≠o
            smart_logger.subs_logger.info(
                f"TRIAL_WARNING_SENT | user_id: {user.id} | empresa_id: {empresa.id} | days_remaining: {days_remaining}"
            )
            
            self.notifications_sent += 1
            return True
            
        except Exception as e:
            error_msg = f"Error enviando notificaci√≥n de trial a {user.email}: {str(e)}"
            self.errors.append(error_msg)
            smart_logger.subs_logger.error(error_msg)
            return False
    
    def send_trial_expired_notification(self, trial_registro):
        """Env√≠a notificaci√≥n de trial expirado"""
        try:
            empresa = trial_registro.empresa
            user = trial_registro.user
            
            context = {
                'user_name': user.first_name or user.username,
                'empresa_name': empresa.nombre,
                'login_url': f"{settings.SITE_URL}/accounts/login/",
                'upgrade_url': f"{settings.SITE_URL}/suscripciones/",
                'support_email': settings.DEFAULT_FROM_EMAIL,
                'today': self.today
            }
            
            subject = "üîí Tu trial de eGarage ha expirado - ¬°Activa tu suscripci√≥n!"
            
            html_message = render_to_string('emails/trial_expired.html', context)
            
            plain_message = f"""
Hola {context['user_name']},

Tu trial de eGarage para {context['empresa_name']} ha expirado.

Para reactivar tu cuenta y continuar gestionando tu taller:
1. Activa tu suscripci√≥n: {context['upgrade_url']}
2. Ingresa a tu cuenta: {context['login_url']}

¬øTienes preguntas? Estamos aqu√≠ para ayudarte: {context['support_email']}

Saludos,
Equipo eGarage
            """.strip()
            
            send_mail(
                subject=subject,
                message=plain_message,
                from_email=settings.DEFAULT_FROM_EMAIL,
                recipient_list=[user.email],
                html_message=html_message,
                fail_silently=False
            )
            
            smart_logger.subs_logger.info(
                f"TRIAL_EXPIRED_SENT | user_id: {user.id} | empresa_id: {empresa.id}"
            )
            
            self.notifications_sent += 1
            return True
            
        except Exception as e:
            error_msg = f"Error enviando notificaci√≥n de expiraci√≥n a {user.email}: {str(e)}"
            self.errors.append(error_msg)
            smart_logger.subs_logger.error(error_msg)
            return False
    
    def send_subscription_expiration_warning(self, empresa, days_remaining):
        """Env√≠a notificaci√≥n de vencimiento de suscripci√≥n"""
        try:
            user = empresa.usuario
            
            context = {
                'user_name': user.first_name or user.username,
                'empresa_name': empresa.nombre,
                'days_remaining': days_remaining,
                'expiration_date': empresa.fecha_vencimiento_suscripcion,
                'renewal_url': f"{settings.SITE_URL}/suscripciones/renovar/",
                'support_email': settings.DEFAULT_FROM_EMAIL,
                'today': self.today
            }
            
            subject = f"‚è∞ Tu suscripci√≥n a eGarage vence en {days_remaining} d√≠a{'s' if days_remaining != 1 else ''}"
            
            html_message = render_to_string('emails/subscription_expiration_warning.html', context)
            
            plain_message = f"""
Hola {context['user_name']},

Tu suscripci√≥n a eGarage para {context['empresa_name']} vence en {days_remaining} d√≠a{'s' if days_remaining != 1 else ''} ({context['expiration_date']}).

Para renovar tu suscripci√≥n:
‚Ä¢ Visita: {context['renewal_url']}
‚Ä¢ O sube tu comprobante de pago en tu panel de control

¬øNecesitas ayuda? Cont√°ctanos: {context['support_email']}

Saludos,
Equipo eGarage
            """.strip()
            
            send_mail(
                subject=subject,
                message=plain_message,
                from_email=settings.DEFAULT_FROM_EMAIL,
                recipient_list=[user.email],
                html_message=html_message,
                fail_silently=False
            )
            
            smart_logger.subs_logger.info(
                f"SUBSCRIPTION_WARNING_SENT | empresa_id: {empresa.id} | days_remaining: {days_remaining}"
            )
            
            self.notifications_sent += 1
            return True
            
        except Exception as e:
            error_msg = f"Error enviando notificaci√≥n de suscripci√≥n a {user.email}: {str(e)}"
            self.errors.append(error_msg)
            smart_logger.subs_logger.error(error_msg)
            return False
    
    def process_trial_notifications(self):
        """Procesa todas las notificaciones de trials"""
        print("üîç Verificando trials...")
        
        # Trials activos
        active_trials = TrialRegistro.objects.filter(
            activo=True,
            fecha_expiracion__gt=self.today
        )
        
        for trial in active_trials:
            days_remaining = trial.dias_restantes()
            
            # Notificaciones en d√≠as espec√≠ficos: 7, 3, 1
            if days_remaining in [7, 3, 1]:
                print(f"üìß Enviando aviso de trial (quedan {days_remaining} d√≠as): {trial.user.email}")
                self.send_trial_expiration_warning(trial, days_remaining)
        
        # Trials expirados hoy
        expired_today = TrialRegistro.objects.filter(
            activo=True,
            fecha_expiracion=self.today
        )
        
        for trial in expired_today:
            print(f"üîí Enviando notificaci√≥n de expiraci√≥n: {trial.user.email}")
            self.send_trial_expired_notification(trial)
            
            # Marcar como expirado
            trial.expirar_si_corresponde()
    
    def process_subscription_notifications(self):
        """Procesa todas las notificaciones de suscripciones"""
        print("üîç Verificando suscripciones...")
        
        empresas_activas = Empresa.objects.filter(
            estado_suscripcion='activa',
            fecha_vencimiento_suscripcion__isnull=False
        )
        
        for empresa in empresas_activas:
            if empresa.fecha_vencimiento_suscripcion:
                days_until_expiration = (empresa.fecha_vencimiento_suscripcion - self.today).days
                
                # Notificaciones en d√≠as espec√≠ficos: 15, 7, 3, 1
                if days_until_expiration in [15, 7, 3, 1]:
                    print(f"üìß Enviando aviso de suscripci√≥n (quedan {days_until_expiration} d√≠as): {empresa.usuario.email}")
                    self.send_subscription_expiration_warning(empresa, days_until_expiration)
    
    def run(self):
        """Ejecuta el agente de notificaciones"""
        print(f"üöÄ Iniciando agente de notificaciones - {self.today}")
        
        try:
            # Procesar trials
            self.process_trial_notifications()
            
            # Procesar suscripciones
            self.process_subscription_notifications()
            
            # Resumen final
            print(f"\n‚úÖ Agente completado:")
            print(f"   üìß Notificaciones enviadas: {self.notifications_sent}")
            print(f"   ‚ùå Errores: {len(self.errors)}")
            
            if self.errors:
                print("\nüö® Errores encontrados:")
                for error in self.errors:
                    print(f"   ‚Ä¢ {error}")
            
            # Log del resumen
            smart_logger.subs_logger.info(
                f"NOTIFICATION_AGENT_COMPLETED | sent: {self.notifications_sent} | errors: {len(self.errors)}"
            )
            
        except Exception as e:
            error_msg = f"Error cr√≠tico en agente de notificaciones: {str(e)}"
            print(f"üí• {error_msg}")
            smart_logger.subs_logger.error(error_msg)
            return False
        
        return True


def main():
    """Funci√≥n principal para ejecutar desde cronjob"""
    agent = NotificationAgent()
    success = agent.run()
    
    if success:
        sys.exit(0)  # √âxito
    else:
        sys.exit(1)  # Error


if __name__ == "__main__":
    main()
